package handler

import (
	"github.com/arnab-xyz/todoApp/internal/model"
	"github.com/arnab-xyz/todoApp/internal/service"
	"github.com/gin-gonic/gin"
	"net/http"
)

type Handler struct {
	service *service.Service
}

func NewHandler(service *service.Service) *Handler {
	return &Handler{
		service: service,
	}
}

func (h *Handler) Create(c *gin.Context) {
	todo := &model.Todo{}
	err := c.BindJSON(todo)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error()})
		return
	}
	todo, err = h.service.Create(c, todo)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
	}
	c.JSON(http.StatusCreated, todo)
	return
}

func (h *Handler) Get(c *gin.Context) {
	id := c.Param("id")
	todo, err := h.service.Get(c, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
	}
	if todo != nil {
		c.JSON(http.StatusOK, todo)
	}
	c.JSON(http.StatusNotFound, gin.H{
		"error": "Not found",
	})
}

func (h *Handler) GetAll(c *gin.Context) {
	todos, err := h.service.GetAll(c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
	}
	c.JSON(http.StatusOK, todos)
}

func (h *Handler) Update(c *gin.Context) {
	id := c.Param("id")
	updatedTodo := &model.Todo{}
	err := c.BindJSON(updatedTodo)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": err.Error(),
		})
	}
	err = h.service.Update(c, id, updatedTodo)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
	}
	c.JSON(http.StatusOK, nil)
}

func (h *Handler) Delete(c *gin.Context) {
	id := c.Param("id")
	err := h.service.Delete(c, id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": err.Error(),
		})
	}
	c.JSON(http.StatusOK, nil)
}
